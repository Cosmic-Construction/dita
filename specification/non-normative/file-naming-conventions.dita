<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="file-naming-conventions"  xml:lang="en-us">
 <title>File naming conventions</title>
 <shortdesc>The DITA OASIS Technical Committee uses certain conventions for
    the names of XML grammar files. We suggest using these conventions as a
    best practice to facilitate the interchange of grammar
    files.</shortdesc>
 <conbody>
    <section id="general-considerations">
      <title>General considerations</title>
      <dl>
        <dlentry>
          <dt>Globally unique identifiers</dt>
          <dd>
            <p>Vocabulary modules that are intended for use outside of a
              narrowly-restricted context should have one or more
              associated, globally-unique names by which the modules can be
              referenced without regard to their local storage location.
              The globally-unique names can be public identifiers, URNs, or
              absolute URLs.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><ph rev="review-p">Document-type</ph> shells</dt>
          <dd>
            <p><ph rev="review-p">Document-type</ph> shells should be given
              a name that distinguishes their name, owner, or purpose, for
              example, <filepath>acme-concept.dtd</filepath>. The <ph
                rev="review-k">document-type</ph> shells that are provided
              by the DITA Technical Committee use the root element of the
              primary specialization as the basis for the file name.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Module names</dt>
          <dd>
            <p>For structural modules, the module name should be the
              element type name of the top-level topic or map type defined
              by the module, such as "concept" or "bookmap".</p>
            <p>For element-domain  or attribute-domain modules, the module
              name should be a name that reflects the subject domain to
              which the domain applies, such as "highlight" or "software".
              Domain module names should be sufficiently unique that they
              are unlikely to conflict with any other domains.</p>
            <p>In addition, each element-domain or attribute-domain module
              has a short name that is used to construct entity names and
              other names that are used in associated declarations. Modules
              also can have abbreviated names that further shorten the
              short name, for example "hi-d" for the "highlight" domain,
              where "highlight" is the short name and "hi-d" is the
              abbreviated name. </p>
          </dd>
        </dlentry>
      </dl>
    </section>
    <!--<section id="unique-identifiers"><title>Globally unique identifiers</title><p>Vocabulary modules that are intended for use outside of a narrowly-restricted context should have one or more associated, globally-unique names by which the modules can be referenced without regard to their local storage location. The globally-unique names can be public identifiers, URNs, or absolute URLs.</p></section>-->
    <!--<section id="document-type-shells"><title><ph rev="review-p">Document-type</ph> shells</title><p><ph rev="review-p">Document-type</ph> shells should be given a name that distinguishes their name, owner, or purpose; for example, <filepath>acme-concept.dtd</filepath>. The <ph rev="review-k">document-type</ph> shells that are provided by the DITA Technical Committee use the root element of the primary specialization as the basis for the file name.</p></section>-->
    <!--<section id="module-names"><title>Module names</title><p>Each vocabulary module has a short name that is used to construct entity names and other names that are used in associated declarations. Modules also can have abbreviated names that further shorten the short name, for example "hi-d" for the "highlight" domain, where "software" is the short name and "hi-d" is the abbreviated name. </p><p>For structural modules, the module name should be the element type name of the top-level topic or map type defined by the module, such as "concept" or "bookmap".</p><p>For element domain modules, the module name should be a name that reflects the subject domain to which the domain applies, such as "highlight" or "software". Domain module names should be sufficiently unique that they are unlikely to conflict with any other domains.</p><draft-comment author="Kristen Eberlein" time="27 May 2015" audience="spec-editors"><p>Let's be careful that we use the terms "short name" and "abbreviated name" consistently throughout the spec.</p></draft-comment></section>-->
  <section id="dtd-specialization-modules">
   <title>DTD-based specialization modules</title>
   <p>The DITA Technical Committee uses the following file-naming
        conventions for DTD-based specialization modules:</p>
   <simpletable frame="all" relcolwidth="1.0* 1.0* 1.0* 1.0*">
    <sthead>
     <stentry>Module type</stentry>
     <stentry>Entities file name </stentry>
     <stentry>Elements file name</stentry>
     <stentry>Example</stentry>
    </sthead>
    <strow>
     <stentry>Structural</stentry>
     <stentry><filepath><varname>moduleName</varname>.ent</filepath></stentry>
     <stentry><filepath><varname>mduleName</varname>.mod</filepath></stentry>
     <stentry>
            <sl>
              <sli><filepath>concept.ent</filepath></sli>
              <sli><filepath>concept.mod</filepath></sli>
            </sl>
          </stentry>
    </strow>
 
    <strow>
     <stentry>Element domain</stentry>
     <stentry><filepath><varname>domainName</varname>Domain.ent</filepath></stentry>
     <stentry><filepath><varname>domainName</varname>Domain.mod</filepath></stentry>
     <stentry>
            <sl>
              <sli><filepath>highlightDomain.ent</filepath></sli>
              <sli><filepath>highlightDomain.mod</filepath></sli>
            </sl>
          </stentry>
    </strow>

    <strow>
     <stentry>Attribute domain</stentry>
     <stentry><filepath><varname>attributeName</varname>AttDomain.ent</filepath></stentry>
     <stentry>Not applicable</stentry>
     <stentry><filepath>deliveryTargetAttDomain.ent</filepath>
     </stentry>
    </strow>
   </simpletable>
   <p>where:</p>
   <ul>
    <li><varname>moduleName</varname> is the name of the element type, such
          as "concept" or "glossentry".</li>
    <li><varname>domainName</varname> is the name of the domain, for
          example, "highlight" or "utilities".</li>
    <li><varname>attributeName</varname> is the name of the specialized
          attribute, for example, "deliveryTarget".</li>
   </ul>
  </section>
  <section id="relax-ng-modules">
   <title>RELAX NG-based specialization modules</title>
      <p>The DITA Technical Committee uses the following file-naming
        conventions for RNG-based specialization modules:</p>
   <simpletable frame="all" relcolwidth="1.0* 3.0* 1.0*">
    <sthead>
     <stentry>Module type</stentry>
     <stentry>File name</stentry>
     <stentry>Example</stentry>
    </sthead>
    <strow>
     <stentry>Structural</stentry>
     <stentry><filepath><varname>moduleName</varname>Mod.<varname>rng</varname></filepath></stentry>
     <stentry><filepath>conceptMod.rng</filepath></stentry>
    </strow>
    <strow>
     <stentry>Element domain</stentry>
     <stentry><filepath><varname>domainName</varname>DomainMod.rng</filepath></stentry>
     <stentry><filepath>highlightDomainMod.rng</filepath>
     </stentry>
    </strow>
    <strow >
     <stentry>Attribute domain</stentry>
     <stentry><filepath><varname>attributeName</varname>AttDomain.rng</filepath></stentry>
     <stentry><filepath>deliveryTargetAttDomainMod.rng</filepath></stentry>
    </strow>
   </simpletable>
   <p>where:</p>
   <ul>
    <li><varname>moduleName</varname> is the name of the element type, such
          as "concept" or "glossentry".</li>
    <li><varname>domainName</varname> is the name of the domain, for
          example, "highlight" or "utilities".</li>
    <li><varname>dttributeName</varname> is the name of the specialized
          attribute, for example, "deliveryTarget".</li>
   </ul>
  </section>
  <section id="constraint-modules">
   <title>Constraint modules</title>
      <p>The DITA Technical Committee suggests using the following
        file-naming conventions for DTD-based constraint modules:</p>
   <dl>
    <dlentry>
     <dt>Structural modules</dt>
     <dd>
      <p>Structural constraint modules should be named using the following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>Constraint.mod</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>ConstraintMod.rng</filepath></stentry>
       </strow>
      </simpletable>
      <p>where:</p>
      <ul>
       <li conref="../common/conref-file.dita#reuse_file/qualifier-li"
        conrefend="../common/conref-file.dita#reuse_file/Tagname-li"/>
      </ul>
      <p otherprops="examples">For example, the file names for the
              constraint that is applied to the general task to create the
              strict task are
                <filepath>strictTaskbodyConstraint.mod</filepath> and
                <filepath>strictTaskbodyConstraintMod.rng</filepath>.</p>
     </dd>
    </dlentry>
    <dlentry>
     <dt>Domain modules</dt>
     <dd>
      <p>Domain constraint modules should be named using the following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraint.ent</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintMod.rng</filepath></stentry>
       </strow>
      </simpletable>
      <p>where: </p>
      <ul conref="../common/conref-file.dita#reuse_file/dtd-domains-constraint">
       <li/>
      </ul>
      <p otherprops="examples">For example, the file name for a constraint
              module that removes the <xmlelement>tt</xmlelement> and
                <xmlelement>u</xmlelement> elements from the highlight
              domain domain might be
                <filepath>acmeHighlightDomainConstraint.ent</filepath>.</p>
     </dd>
    </dlentry>
   </dl>
  </section>
    <section id="expansion-modules">
      <title>Expansion modules</title>
      <draft-comment author="Kristen J Eberlein" time="11 September 2022">
        <p>We either need content for this section, or the previous section
          should be titled "Element-configuration modules" and cover both
          constraints and expansion.</p>
      </draft-comment>
    </section>
 </conbody>
</concept>
