<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="filtering">
 <title>Filtering based on metadata attributes</title>
 <shortdesc>When rendering content, a conditional processing profile can be used to specify whether
  an element's content is filtered based on its conditional processing attributes.</shortdesc>
 <conbody>
  <p>To determine whether content is filtered, a processor compares the conditional processing
   attributes on a DITA element to rules specified in a conditional processing profile. If any one
   of the conditional processing attributes evaluates as <keyword>exclude</keyword>, that content is
   filtered.</p>
  <p>Within a DITAVAL document, it is possible to specify a default action for conditional
   processing attributes. When no default is specified, the processing default for any attribute or
   value not otherwise listed is <keyword>include</keyword>. <ph otherprops="examples">For example,
    if no default action is provided for <xmlatt>audience</xmlatt> and the value
     <keyword>novice</keyword> for that attribute is not defined, that attribute value will have a
    processing default of <keyword>include</keyword>.</ph></p>
  <p>When deciding whether to include or exclude a particular element, a processor evaluates each
   attribute independently:</p>
  <ol>
   <li>For each attribute:<ul>
<li >If the attribute is empty, or contains only empty groups, it is equivalent
to omitting the attribute from the element. If evaluated for the purposes of filtering, the
attribute is treated as "include", because an omitted attribute cannot evaluate to "exclude".</li>
     <li>If the attribute value does not contain any groups, then if any string token in the
      attribute value evaluates to <keyword>include</keyword>, the element evaluates to
       <keyword>include</keyword>. In other words, the attribute evaluates to
       <keyword>exclude</keyword> only when <b>all</b> string tokens in that attribute evaluate to
       <keyword>exclude</keyword>.</li>
     <li>If the attribute value does include groups, evaluate as follows, treating ungrouped tokens
      together as an implicit group:<ol>
       <li>For each group (including any implicit group), if any string token inside the group
        evaluates to <keyword>include</keyword>, the group evaluates to <keyword>include</keyword>.
        In other words, a group evaluates to <keyword>exclude</keyword> only when <b>all</b> string
        tokens in that group evaluate to <keyword>exclude</keyword>.</li>
       <li>If any group within an attribute evaluates to <keyword>exclude</keyword>, that attribute
        evaluates to <keyword>exclude</keyword>. In other words, the attribute evaluates to
         <keyword>include</keyword> only when <b>all</b> groups in that attribute evaluate to
         <keyword>include</keyword>.</li>
      </ol></li>
    </ul></li>
   <li>If <b>any single attribute</b> evaluates to <keyword>exclude</keyword>, the element is
    filtered.</li>
  </ol>
  <!--<draft-comment author="Kristen Eberlein" time="8 February 2014">We need to make this wording more precise and less ambiguous. Is the following content what was intended?<ul><li>(For an attribute with a single value) If the attribute value is set to "exclude", the element is excluded.</li><li>(For an attribute with multiple values) If all the attribute values are set to "exclude", the element is excluded</li><li>(For an attribute with a single group of values) If all the attribute values in the group are set to "exclude", the element is excluded.</li></ul>I'm not sure I understand what is meant by "When deciding whether to include or exclude a particular element, a processor should evaluate each attribute, and then evaluate the set of attributes." What's the difference between evaluating each attribute and evaluating a set of attributes?</draft-comment><draft-comment author="robander" time="21 April 2014">I think that is resolved now. I've tweaked the wording a bit - the list in the previous draft comment was not correct.</draft-comment>-->
  <p>For example, if a paragraph applies to three products and the publisher has chosen to exclude
   all of them, the processor will exclude the paragraph. This is true even if the paragraph applies
   to an audience or platform that is not excluded. But if the paragraph applies to an additional
   product that has not been excluded, then its content is still relevant for the intended output
   and is preserved.</p>
  <draft-comment author="rodaande" time="2021-09-14">Think maybe we should probably rework the
   example below to not use steps, given that the steps element is not part of the base
   spec?</draft-comment>
  <p>Similarly, with groups, a step might apply to one application server and two database
   applications:<codeblock id="groupcodesample">&lt;steps>
  &lt;step>&lt;cmd>Common step&lt;/cmd>&lt;/step>
  &lt;step product="appServer(mySERVER) database(ABC dbOtherName)">
    &lt;cmd>Do something special for databases ABC or OtherName when installing on mySERVER&lt;/cmd>
  &lt;/step>
  &lt;!-- additional steps -->
&lt;/steps></codeblock></p>
  <p>If a publisher decides to exclude the application server mySERVER, then the appServer() group
   evaluates to exclude. This can be done by setting <codeph>product="mySERVER"</codeph> to exclude
    <i>or</i> by setting <codeph>appServer="mySERVER"</codeph> to exclude. This means the step is
   excluded, regardless of how the values "ABC" or "dbOtherName" evaluate. If a rule is specified
   for both <codeph>product="mySERVER"</codeph> and <codeph>appServer="mySERVER"</codeph>, the rule
   for the more specific group name "appServer" takes precedence.</p>
  <p>Similarly, if both "ABC" and "dbOtherName" evaluate to exclude, then the database() group
   evaluates to exclude and the element is excluded regardless of how the "mySERVER" value is
   set.</p>
  <p>In more advanced usage, a DITAVAL can be used to specify a rule for a group name. For example,
   an author could create a DITAVAL rule that sets <codeph>product="database"</codeph> to "exclude".
   This is equivalent to setting a default of "exclude" for any individual value in a database()
   group; it also excludes the more common usage of "database" as a single value within the
    <xmlatt>product</xmlatt> attribute. Thus when "myDB" appears in a database() group within the
    <xmlatt>product</xmlatt> attribute, the full precedence for determining whether to include or
   exclude the value is as follows:<ol>
    <li>Check for a DITAVAL rule for <codeph>database="myDB"</codeph></li>
    <li>Check for a DITAVAL rule for <codeph>product="myDB"</codeph></li>
    <li>Check for a DITAVAL rule for <codeph>product="database"</codeph> (default for the database
     group)</li>
    <li>Check for a DITAVAL rule for "product" (default for the <xmlatt>product</xmlatt>
     attribute)</li>
    <li>Check for a default rule for all conditions (default of include or exclude for all
     attributes)</li>
    <li>Otherwise, evaluate to "include"</li>
   </ol></p>
 </conbody>
</concept>
