<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA 2.x Concept//EN" "concept.dtd">
<concept id="dtdStructuralCoding" xml:lang="en-us">
  <title>DTD: Coding requirements for structural modules</title>
  <shortdesc>This topic covers general coding requirements for DTD-based
    structural modules.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>coding requirements<indexterm>DTD<indexterm>structural
            modules</indexterm></indexterm></indexterm>
        <indexterm>DTD<indexterm>coding requirements<indexterm>structural
            modules</indexterm></indexterm></indexterm>
        <indexterm>topic nesting<indexterm>controlling</indexterm></indexterm>
        <indexterm>topic nesting<indexterm>disabling</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <section id="architectural-attributes">
      <title>Required topic and map element attributes</title>
      <p>The topic or map element type sets the <xmlatt>DITAArchVersion</xmlatt> attribute to the
        version of DITA in use, typically by referencing the <codeph>arch-atts</codeph> parameter
        entity. It also sets the <xmlatt>specializations</xmlatt> attribute to the
          <codeph>included-domains</codeph> entity.</p>
      <p>The <xmlatt>DITAArchVersion</xmlatt> and <xmlatt>specializations</xmlatt> attributes give
        processors a reliable way to check the architecture version and look up the list of
        attribute domains that are available in the document type.</p>
      <example>
        <p>The following example shows how the <xmlatt>DITAArchVersion</xmlatt> and
            <xmlatt>specializations</xmlatt> attributes are defined for the
            <xmlelement>concept</xmlelement> element in DITA 2.0. Ellipses indicate where the code
          is snipped for brevity:</p>
        <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    ELEMENT DECLARATIONS                       -->
&lt;!-- ============================================================= -->

...

&lt;!--                    LONG NAME: Concept                         -->

...

&lt;!ATTLIST concept    
  %concept.attributes;
  <b>%arch-atts;
  specializations  CDATA  "&amp;included-domains;</b>"></codeblock>
      </example>
    </section>
    <section id="topic-nesting">
      <title>Controlling nesting in topic types</title>
      <p><ph rev="2.0">A structural module that defines a new topic
          type</ph> typically uses a parameter entity to define a default
        for what topic types are permitted to nest. When this is done
        consistently, a shell that includes multiple structural modules can
        set common nesting rules for all topic types by setting
          <codeph>%info-types;</codeph> entity. </p>
      <p>The following rules apply when using parameter entities to control
        nesting.</p>
      <dl>
        <dlentry>
          <dt>Parameter entity name</dt>
          <dd>
            <p>The name of the parameter entity is the topic element name plus the
                <codeph>-info-types</codeph> suffix.</p>
            <example>
              <p>For example, the name of the parameter entity for the concept topic is
                  <codeph>concept-info-types</codeph>. </p>
            </example>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Parameter entity value</dt>
          <dd>
            <p>To set up default topic nesting rules, set the entity to the desired topic elements.
              The default topic nesting is used when a document-type shell does not set up different
              rules. </p>
            <example>
              <p>For example, the following parameter entity sets up default nesting so that
                  <xmlelement>concept</xmlelement> will nest only other
                  <xmlelement>concept</xmlelement> topics:</p>
              <codeblock>&lt;!-- ============================================================= -->
&lt;!--                    ELEMENT DECLARATIONS                       -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % concept-info-types
              "%info-types;"
></codeblock>
            </example>
            <example>
              <p>As an additional example, the following parameter entity sets up a default that
                will not allow any nesting:</p>
              <codeblock><![CDATA[<!ENTITY % glossentry-info-types "no-topic-nesting">]]></codeblock>
            </example>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Content model of the root element</dt>
          <dd>
            <p>The last position in the content model defined for the root
              element of a topic type should be the
                  <codeph><varname>topictype</varname>-info-types</codeph>
              parameter entity.</p>
            <p>A document-type shell then can control how topics are
              allowed to nest for this specific topic type by redefining
              the <codeph><varname>topictype</varname>-info-types</codeph>
              entity for each topic type.</p>
            <example>
              <p>For example, with the following content model defined for
                  <xmlelement>concept</xmlelement>, a document-type shell that uses the concept
                specialization can control which topics are nested in
                  <xmlelement>concept</xmlelement> by redefining the
                  <codeph>concept-info-types</codeph> parameter entity:</p>
              <codeblock otherprops="examples">&lt;!ENTITY % concept.content
  "((%title;), 
    (%titlealts;)?,
    (%abstract; | %shortdesc;)?, 
    (%prolog;)?, 
    (%conbody;)?, 
    (%related-links;)?,
    <b>(%concept-info-types;)*</b>)"
></codeblock>
            </example>
          </dd>
        </dlentry>
      </dl>
      <p>In certain cases, you do not need to use an <codeph>info-types</codeph> parameter entity to
        control topic nesting:</p>
      <ul>
        <li>If you want a specialized topic type to never allow any nested topics, regardless of
          context, it can be defined without any entity or any nested topics.</li>
        <li>If you want a specialized topic type to only allow specific nesting patterns, such as
          allowing only other topic types that are defined in the same module, it can nest those
          topics directly in the same way that other nested elements are defined.</li>
      </ul>
    </section>
  </conbody>
</concept>
