<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="audio">
  <title><xmlelement>audio</xmlelement></title>
  <shortdesc conref="../../common/conref-short-descriptions.dita#conref-short-descriptions/audio"/>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>audio</indexterm>
        <indexterm>multimedia domain<indexterm>audio </indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="usage-information">
      <title>Usage information</title>
      <p>Audio objects are modeled on the HTML5 <xmlelement>audio</xmlelement> element.</p>
      <p>Audio objects can be referenced by <xmlatt>data</xmlatt>, <xmlatt>datakeyref</xmlatt>, and
        nested <xmlelement>media-source</xmlelement> elements. Nested
          <xmlelement>media-source</xmlelement> elements enable extensive configuration of how the
        audio object is presented</p>
    </section>
    <section id="formatting-expectations">
      <title>Rendering expectations</title>
      <p>When an audio object cannot be rendered in a meaningful way, processors <keyword
          outputclass="rfc-2119">SHOULD</keyword> present the contents of the
          <xmlelement>fallback</xmlelement> element, if it is present.</p>
    </section>
    <section id="processing-expectations">
      <title>Processing expectations</title>
      <p>Behaviors such as auto-playing, looping, and muting are determined by child elements. When not specified, the
        behavior depends on the user agent.</p>
      <draft-comment author="Kristen J Eberlein" time="22 April 2019">
        <p>If we keep the above wording, we need to define the term <term>user agent</term>.</p>
      </draft-comment>
    </section>
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>audio</xmlelement> element is specialized from
          <xmlelement>object</xmlelement>. It is defined in the multimedia-domain module.</p>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <xref keyref="attributes-universal"
        /> and the attributes defined below.</p>
      <dl>
        <dlentry>
          <dt><xmlatt>data</xmlatt></dt>
          <dd>Specifies the absolute or relative URI of the audio object. If this attribute is
            specified, <xmlatt>type</xmlatt> should also be
            specified.<!-- If the audio is available in multiple formats, nested <xmlelement>media-source</xmlelement> elements should be used instead.--></dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>datakeyref</xmlatt></dt>
          <dd>Key reference to the audio object. When specified and the key is resolvable, the
            key-provided URI is used. A key that has no associated resource, only link text, is
            considered to be unresolved. If <xmlatt>data</xmlatt> is specified, it is used as a
            fallback when the key cannot be resolved to a resource.</dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>type</xmlatt></dt>
          <dd>Indicates the MIME type for the audio object. This attribute should be set when the
              <xmlatt>data</xmlatt> attribute is set to enable processors to avoid loading
            unsuppported objects. Note that this differs from the <xmlatt>type</xmlatt> attribute on
            many other DITA elements in that it specifies a MIME type rather than a content type.
              <ph>If <xmlatt>type</xmlatt> is not specified, the effective type value for the key
              named by the <xmlatt>datakeyref</xmlatt> attribute is used as the this attribute's
              value.</ph></dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>tabindex</xmlatt></dt>
          <dd>Position the audio in tabbing order.</dd>
        </dlentry>
      </dl>
    </section>
    <example otherprops="examples">
      <title>Examples</title>
      <fig>
        <title>A simple audio object</title>
        <p>In the following code sample, an audio object is referenced using direct addressing. The
            <xmlatt>type</xmlatt> attribute specifies the MIME type of the object.</p>
        <codeblock>&lt;audio data="message.mp3" type="audio/mp3"/></codeblock>
        <p>The audio object also could be addressed using a key reference:</p>
        <codeblock>&lt;audio datakeyref="message" type="audio/mp3"/></codeblock>
      </fig>
      <fig>
        <title>An audio object with multiple formats</title>
        <p>In the following code sample, <xmlelement>media-source</xmlelement> elements are used to
          specify the different audio formats that are available.</p>
        <codeblock>&lt;audio>
  &lt;media-source keyref="message-mp3" value="message.mp3" type="audio/mp3"/>
  &lt;media-source keyref="message-wav" value="message.wav" type="audio/wav"/>
&lt;/audio></codeblock>
      </fig>
      <fig>
        <title>Complex example of an audio object</title>
        <p>The following code sample specifies an audio object and defines multiple presentational
          details.</p>
        <codeblock>&lt;audio>
  &lt;desc>A sound file narrating the execution of this procedure.&lt;/desc>
  &lt;fallback>The audio track walking through this procedure is not available.&lt;/fallback>
  
  &lt;!--
    The default value is 'true', so @value is optional on these controls
    when enabling their features, but mandatory when disabling them.
  -->
  &lt;media-controls value="true"/>
  &lt;media-autoplay/>
  &lt;media-loop value="false"/>
  &lt;media-muted value="false"/>

  &lt;!-- Multiple formats, referenced via both key and URI -->
  &lt;media-source keyref="walkthrough-mp3" value="walkthrough.mp3" type="audio/mp3"/>
  &lt;media-source keyref="walkthrough-wav" value="walkthrough.wav" type="audio/wav"/>
&lt;/audio></codeblock>
      </fig>
    </example>
  </refbody>
</reference>
