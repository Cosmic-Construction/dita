<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="video">
  <title><xmlelement>video</xmlelement></title>
  <shortdesc conref="../../common/conref-short-descriptions.dita#conref-short-descriptions/video"/>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>video</indexterm>
        <indexterm>multimedia domain<indexterm>video </indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="usage-information">
      <title>Usage information</title>
      <p>Video objects are modeled on the HTML5 <xmlelement>video</xmlelement> element.</p>
      <p>Video objects can be referenced by <xmlatt>data</xmlatt>, <xmlatt>datakeyref</xmlatt>, and nested
          <xmlelement>media-source</xmlelement> elements. Nested <xmlelement>media-source</xmlelement> elements enable
        extensive configuration of how the video object is presented.</p>
    </section>
    <section id="formatting-expectations">
      <title>Rendering expectations</title>
      <!--<p>When possible, the video should be displayed at the location of the <xmlelement>video</xmlelement> reference. If <xmlatt>width</xmlatt> and/or <xmlatt>height</xmlatt> are specified, those dimensions should be honored.</p>-->
      <p>When a video object cannot be rendered in a meaningful way, processors <keyword
          outputclass="rfc-2119">SHOULD</keyword> present the contents of the
          <xmlelement>fallback</xmlelement> element, if it is present.</p>
    </section>
    <!--<section id="processing-expectations"><title>Processing expectations</title><p>When converting to HTML5 or HTML5-derived output formats, <xmlelement>video</xmlelement> should be mapped to its HTML5-equivalent markup. Processing for other output formats is highly dependent on the capabilities of those formats. Implementers should implement support for presentation of multimedia on a best-effort basis.</p></section>-->
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>video</xmlelement> element is specialized from
          <xmlelement>object</xmlelement>. It is defined in the multimedia-domain module.</p>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <xref keyref="attributes-universal"
        /> and the attributes defined below.</p>
      <dl>
        <dlentry>
          <!-- Identical to definition in video topic -->
          <dt><xmlatt>data</xmlatt></dt>
          <dd>Specifies the absolute or relative URI of the audio object. If this attribute is
            specified, <xmlatt>type</xmlatt> also should be specified.</dd>
          <dd>
            <draft-comment author="Kristen J Eberlein" time="28 April 2019">
              <p>Need to rewrite to remove the word "should</p>
            </draft-comment>
          </dd>
        </dlentry>
        <dlentry>
          <!-- Identical to definition in video topic -->
          <dt><xmlatt>datakeyref</xmlatt></dt>
          <dd>Provides a key reference to the audio object. When specified and the key is
            resolvable, the key-provided URI is used. A key that has no associated resource, only
            link text, is considered to be unresolved. If <xmlatt>data</xmlatt> is specified, it is
            used as a fallback when the key cannot be resolved to a resource.</dd>
          <dd/>
        </dlentry>
        <dlentry>
          <!-- Identical to definition in video topic -->
          <dt><xmlatt>type</xmlatt></dt>
          <dd>Indicates the MIME type for the audio object. Setting this attribute enables
            processors to avoid loading unsuppported objects. Note that this differs from the
              <xmlatt>type</xmlatt> attribute on many other DITA elements; it specifies a MIME type
            rather than a content type. If <xmlatt>type</xmlatt> is not specified, the effective
            type value for the key named by the <xmlatt>datakeyref</xmlatt> attribute is used as the
            value for this attribute.</dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>height</xmlatt></dt>
          <dd>Indicates the vertical dimension for the resulting video display. If necessary, the
            object is scaled to the specified size. <ph id="height-width-units">The value of this
              attribute is a real number (expressed in decimal notation) optionally followed by a
              unit of measure from the set of pc, pt, px, in, cm, mm, em (picas, points, pixels,
              inches, centimeters, millimeters, and ems respectively). The default unit is px
              (pixels). Possible values include: "5", "5in", and "10.5cm".</ph> If a height value is
            specified and no width value is specified, the width will be scaled by the same factor
            as the height. <ph id="height-width-warning">If both a height value and width value are
              specified, implementations <term outputclass="RFC-2119">MAY</term> ignore one of the
              two values when they are unable to scale to each direction using different
              factors.</ph></dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>width</xmlatt></dt>
          <dd>Indicates the horizontal dimension for the resulting video display. If necessary, the
            object is scaled to the specified size. <ph>If both a height value and width value are
              specified, implementations <term outputclass="RFC-2119">MAY</term> ignore one of the
              two values when they are unable to scale to each direction using different
              factors.</ph> If a width value is specified and no height value is specified, the
            height will be scaled by the same factor as the width. <ph>If both a height value and
              width value are specified, implementations <term outputclass="RFC-2119">MAY</term>
              ignore one of the two values when they are unable to scale to each direction using
              different factors.</ph></dd>
        </dlentry>
        <dlentry>
          <dt><xmlatt>tabindex</xmlatt></dt>
          <dd>Position the video in tabbing order.</dd>
        </dlentry>
      </dl>
    </section>
    <example otherprops="examples">
<title>Examples</title>
<fig id="fig_amp_v4z_4hb"><title>A simple video object</title><p>In the following code sample, a
video object is referenced using direct addressing. The <xmlatt>type</xmlatt> attribute specifies
the MIME type of the object.
</p><codeblock>&lt;video data="video.mp4" type="video/mp4"/></codeblock><p>The video object also
could be addressed using a key reference; in this version, both the URI and the MIME type come from
the key definition:</p><codeblock>&lt;video datakeyref="video"/></codeblock></fig>
<fig id="fig_ql2_cpz_4hb"><title>A video object with multiple formats</title><p>In the following
code sample, <xmlelement>media-source</xmlelement> elements are used to specify the different video
formats that are
available.</p><codeblock>&lt;video>
  &lt;media-source value="video.mp4" type="video/mp4"/>
  &lt;media-source value="video.ogg" type="video/ogg"/>
  &lt;media-source value="video.webm" type="video/webm"/>
&lt;/video></codeblock></fig>
<fig id="fig_wsb_jpz_4hb"><title>Complex example of a video object, with multiple formats and
multi-lingual subtitles</title><p>The following video reference explicitly defines multiple
presentational details for a video available in multiple formats, referenced using key references.
It also provides a fallback image for use when the video cannot be
displayed.</p><codeblock>&lt;video width="400px" height="300px">
  &lt;desc>A video illustrating this procedure.&lt;/desc>
  &lt;fallback>
    &lt;image href="video-not-available.png">
      &lt;alt>This video cannot be displayed.&lt;/alt>
    &lt;/image>
  &lt;/fallback>
  
  &lt;!-- Reference the poster via both key -->
  &lt;video-poster keyref="video-poster"/>

  &lt;!--
    When the following elements are used, they have a default value of "true";
    setting value="true" and not specifying @value have the same effect.
    To turn any of these settings off, specify value="false".
  -->
  &lt;media-controls value="true"/>
  &lt;media-autoplay/>
  &lt;media-loop value="false"/>
  &lt;media-muted value="false"/>

  &lt;!-- Multiple formats, referenced via key. The key definition 
       specifies both the URI and the MIME type -->
  &lt;media-source keyref="video-mp4"/>
  &lt;media-source keyref="video-ogg"/>
  &lt;media-source keyref="video-webm"/>

  &lt;!-- Subtitle tracks in English, French and German.
       Each key definition provides a URI and specifies the type value "subtitles". -->
  &lt;media-track xml:lang="en" keyref="video-subtitles-en"/>
  &lt;media-track xml:lang="fr" keyref="video-subtitles-fr"/>
  &lt;media-track xml:lang="de" keyref="video-subtitles-de"/>
&lt;/video></codeblock></fig>
    </example>
    <example/>
  </refbody>
</reference>
