<?xml version="1.0" encoding="utf-8"?><?workdir /C:\Git\dita\specification\temp\pdf\archSpec\base?><?workdir-uri file:/C:/Git/dita/specification/temp/pdf/archSpec/base/?><?path2project ..\..\?><?path2project-uri ../../?><?path2rootmap-uri ../../?><?doctype-public -//OASIS//DTD DITA Concept//EN?><?doctype-system concept.dtd?><concept xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot" class="- topic/topic concept/concept " ditaarch:DITAArchVersion="1.3" domains="(topic concept) (topic abbrev-d) a(props deliveryTarget) (topic equation-d) (topic hazard-d) (topic hi-d) (topic indexing-d) (topic markup-d) (topic mathml-d) (topic pr-d) (topic relmgmt-d) (topic sw-d) (topic svg-d) (topic ui-d) (topic ut-d) (topic markup-d xml-d)" id="modularization" xml:lang="en-us" xtrc="concept:1;3:47" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">
 <title class="- topic/title " xtrc="title:1;4:9" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">Modularization</title>
 <shortdesc class="- topic/shortdesc " xtrc="shortdesc:1;5:13" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">Modularization is at the core of DITA design and implementation. It enables reuse and
  extension of the DITA specialization hierarchy.</shortdesc><prolog class="- topic/prolog "><author class="- topic/author " xtrc="author:1;14:11" xtrf="file:/C:/Git/dita/specification/dita-2.0-specification.ditamap">OASIS DITA Technical Committee</author></prolog>
 <conbody class="- topic/body  concept/conbody " xtrc="conbody:1;7:11" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">
  <p class="- topic/p " xtrc="p:1;8:6" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">The DITA XML grammar files are a set of module files that declare the markup and entities that
   are required for each specialization. The document-type shell then integrates the modules that
   are needed for a particular authoring and publishing context.</p>
  <p class="- topic/p " xtrc="p:2;11:6" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">Because all the pieces are modular, the task of developing a new information type or domain is
   easy. <ph class="- topic/ph " xtrc="ph:1;12:15" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">An information architect</ph> can start with existing base types
   (topic or map) -- or with an existing specialization if it comes close to matching their business
   requirements -- and only develop <ph class="- topic/ph " xtrc="ph:2;14:42" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">an extension</ph> that adds the extra
   semantics or functionality that is required. A specialization reuses elements from ancestor
   modules, but it only needs to declare the elements and attributes that are unique to the
   specialization. This saves considerable time and effort; it also reduces error, enforces
   consistency, and makes interoperability possible.</p>
  <p class="- topic/p " xtrc="p:3;19:6" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">Because all the pieces are modular, it is easy to reuse different modules in different
   contexts. For example, a company that produces machines can use the task requirements and hazard
   statements domains, while a company that produces software can use the software, user interface,
   and programming domains. A company that produces health information for consumers can avoid using
   any of the standard domains, and instead develop a new domain that contains the elements
   necessary for capturing and tracking the comments made by medical professionals who review their
   information for accuracy and completeness.</p>
  <p class="- topic/p " xtrc="p:4;26:6" xtrf="file:/C:/Git/dita/specification/archSpec/base/specialization-modularization.dita">Because all the pieces are modular, new modules can be created and put into use without
   affecting existing document-type shells. For example, a marketing division of a company can
   develop a new specialization for message campaigns and have their content authors begin using
   that specialization, without affecting any of the other information types that they have in
   place.</p>
  
 </conbody>
</concept>