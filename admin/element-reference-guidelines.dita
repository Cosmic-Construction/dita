<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<reference id="element-name" xml:lang="en-us">
   <title><xmlelement>element-name</xmlelement></title>
  <abstract>
    <p>The short description should follow the following patterns:</p>
    <ul>
      <li>Use natural language whenever possible. This is critical for
        elements that are shared with LwDITA.</li>
      <li>Be sure and describe what something is â€“ or the primary function that it serves. For
        example, <q>A short description describes the purpose or main point of a topic.</q></li>
    </ul>
  </abstract>
   <refbody>
      <section id="usage-information">
         <title>Usage information</title>
      <p>Use this section to provide additional information <ph
          rev="review-c">that is necessary for a DITA practitioner</ph> to
        understand. For example:</p>
      <lq>The <xmlelement>dita</xmlelement> element cannot be specialized.
        It is provided as a container that can manage any sequence of any
        type of topic. Topic nesting rules can be configured in the
        document-type shell.</lq>
      <p>Convenience elements should have paragraphs that contain the
        following information:</p>
      <lq>The <xmlelement>linktitle</xmlelement> element is a convenience
        element. It is equivalent to a <xmlelement>titlealt</xmlelement>
        element with <xmlatt>title-role</xmlatt> set to
          <keyword>linking</keyword>. </lq>
      </section>
      <section id="rendering-expectations">
         <title>Rendering expectations</title>
      <p>Use this section to explain any rendering expectation for the
        element. In general, rendering expectation are about how the
        content will show up "on the glass." For example:</p>
      <lq>Processors <term outputclass="RFC-2119">SHOULD</term> render the
        content of the <xmlelement>shortdesc</xmlelement> element as the
        initial paragraph of the topic.</lq>
      <p>Be sure to distinguish between rendering and formatting expectations; formatting
        expectations go in a non-normative appendix topic.</p>
      <p>One way to distinguish between rendering and formatting is that
        rendering expectations are important for interoperatibility. For
        example, in certain cases, it is important that rendering
        application are consistent in choosing what content to display: the
          <xmlelement>shortdesc</xmlelement> is rendered, and when an
          <xmlelement>object</xmlelement> cannot be displayed the
          <xmlelement>fallback</xmlelement> is rendered.</p>
      <p>Formatting can vary without impacting the content itself, such as
        how indentation works for <xmlelement>dl</xmlelement> or how a
          <xmlelement>note</xmlelement> element is styled to stand out.</p>
      </section>
      <section id="processing-expectations">
         <title>Processing expectations</title>
      <p>Use this section to explain processing expectations for the
        element. In general, processing expectations help enforce
        consistency in how conforming DITA processors work with an element.
        Implementors need to pay special attention to any element that has
        this section. For example:</p>
      <lq>When a <xmlelement>shortdesc</xmlelement> element occurs in a
        DITA map, it overrides the short description provided in the topic
        for the purpose of generating map-based link previews. It does not
        replace the <xmlelement>shortdesc</xmlelement> in the rendered
        topic itself. This means that generated map-based links to this
        topic will use the short description from the map for any link
        previews provided with the link, while the rendered topic continues
        to use the short description inside the topic.</lq>
      <div rev="review-c">
        <p>If the processing expectations for the element are described in
          the archSpec, link to that content. For example, the following
          paragraph is the sole content of "Processing expectations" topic
          in the <xmlelement>keytext</xmlelement> topic:</p>
        <lq>See "Processing key references to generate text or link
          text".</lq>
      </div>
      </section>
      <section id="specialization-hierarchy">
         <title>Specialization hierarchy</title>
      <p>This section will appear for any element that is specialized from another element. Use the
        following type of wording:</p>
      <lq>The <xmlelement>linktitle</xmlelement> element is specialized
        from <xmlelement>titlealt</xmlelement>. It is defined in the
        alternative-titles domain module.</lq>
      </section>
      <section id="attributes">
         <title>Attributes</title>
      <p>Attribute descriptions have been simplified from DITA 1.3. While not visible in DITAWeb or
        in the PDF, linked attribute groups in the OASIS-styled HTML will display hover text that
        lists all attributes. In most cases we have tried to eliminate wording such as "Uses the
        display attribute group except for X" or "Uses X and Y from the linking attribute group", in
        favor of simply listing the attributes (which link directly to the definition).</p>
      <p rev="review-e">Use the phrase "The following values are valid:"
        when introducing a list that outlines the possible values for an
        attribute.</p>
      <p>When an element uses a common attribute but with a narrowed definition (such as a default
        value, or "only use this href to link to X"), link to the common attribute followed by a
        paragraph with <xmlatt>outputclass</xmlatt> set to <keyword>attr-exception</keyword>.<ul
          id="ul_svw_cks_zrb">
          <li>If there is only one exception, use: "For this element, the <xmlatt>blah</xmlatt>
            attribute..."</li>
          <li>If there are multiple exceptions, use the following paragraph followed by an unordered
            list: "For this element, the following considerations apply."</li>
        </ul></p>
      </section>
      <example id="example" otherprops="examples">
      <title>Example</title>
      <p>This section should have a title of either <q>Example</q> or
          <q>Examples</q>, depending on whether there are multiple
        examples.</p>
      <p>(If there are multiple examples) The section should be introduced
        with a paragraph; use the following phrasing:</p>
      <lq>This section contains examples of how the
          <xmlelement>myElement</xmlelement> element can be used.</lq>
      <p>Each example should be in a <xmlelement>fig</xmlelement> element
        with a title. Each code sample should be introduced with a
        paragraph that explains what the code sample does and its
        relevance; we use the following phrasing: <q>The following code
          sample shows ...</q></p>
      <p>The code samples should be realistic, if it all possible. The
        relevant elements in the code sample might be highlighted (bold) to
        draw the readers attention. Code samples should be indented four
        spaces.</p>
      <p>If content is "snipped" from the code sample, it should be indicated with <codeph>&lt;!--
          ... --></codeph>. All code samples that use real DITA need to validate. If a code sample
        includes non-DITA XML, add <codeph>base="ci-xml"</codeph> to ensure our CI testing validates
        it as XML (but not as DITA). If a code sample includes non-XML, add
          <codeph>base="ci-skip"</codeph> to have the CI testing skip that code block.</p>
      <div rev="review-c">
        <p>If the "Example" section points to another topic, instead of
          containing its own example, be sure and hyperlink directly to the
          other topic. Keep the wording simple, for example "See
          &lt;topicA>." or "See &lt;topicA> and &lt;topicB>."</p>
        <p>Use the following markup conventions:</p>
        <dl>
          <dlentry>
            <dt>Linking to the entire "Example" section</dt>
            <dd>Cross reference to the "Example" section, and insert
                <codeph>&lt;xmlelement>element-name&lt;/xmlelement></codeph>
              inside the cross reference.</dd>
          </dlentry>
          <dlentry>
            <dt>Linking to a specific example</dt>
            <dd>Cross reference to the (first) specific figure that
              contains an appropriate example. Insert
                <codeph>&lt;xmlelement>element-name&lt;/xmlelement></codeph>
              inside the cross reference.</dd>
          </dlentry>
        </dl>
      </div>
    </example>
   </refbody>
</reference>

